# agents/code_generator_agent.py
from state import ForgeState
from core.file_client import FileSystemClient # <<< UPDATED IMPORT to point to the new central client

class CodeGenerationAgent:
    """
    This agent executes commands from the structured JSON plan.
    """
    def __init__(self):
        # The agent creates an instance of the client from its new, central location.
        self.fs_client = FileSystemClient()

    async def execute_step(self, state: ForgeState) -> dict:
        """
        The main logic for the Coder Agent. It executes a single step from the plan.
        """
        step_index = state.get('current_step', 0)
        plan = state.get('plan', [])

        # If we've gone past the end of the plan, there's nothing left to do.
        if step_index >= len(plan):
            return {"result": "Plan finished."}

        # Get the current step, which is now a dictionary (e.g., {"command": "CREATE_FILE", ...})
        step = plan[step_index]
        
        # Safely get the command and parameters from the dictionary.
        command = step.get("command")
        path = step.get("path")
        content = step.get("content")

        print(f"---CODER AGENT: Executing step {step_index + 1}: {command} on path '{path}'---")

        try:
            # Check the command and execute the corresponding action.
            if command == "CREATE_FILE":
                await self.fs_client.write_file(path, "# Auto-generated by The Forge\n")
                result_message = f"Successfully created file: {path}"
            elif command == "WRITE_TO_FILE":
                # Ensure content is not None before writing, which could happen with a malformed plan.
                if content is None:
                    raise ValueError("Content cannot be None for WRITE_TO_FILE command.")
                await self.fs_client.write_file(path, content)
                result_message = f"Successfully wrote content to file: {path}"
            else:
                result_message = f"Skipped step (unknown command): {command}"

            print(f"---CODER AGENT: {result_message}---")
            # Return the result and increment the step counter for the next loop.
            return {"result": result_message, "current_step": step_index + 1}
        
        except Exception as e:
            error_message = f"An error occurred executing step: {e}"
            print(f"---CODER AGENT: ERROR - {error_message}---")
            return {"error": error_message}