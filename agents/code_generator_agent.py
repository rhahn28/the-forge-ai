# agents/code_generator_agent.py

from state import ForgeState
from core.file_client import FileSystemClient
from core.shell_client import ShellClient
from core.venv_manager import VirtualEnvManager, sanitize_task_name
import os

class CodeGenerationAgent:
    def __init__(self):
        self.fs_client = FileSystemClient()
        self.shell_client = ShellClient()
        self.venv_manager = VirtualEnvManager()

    async def execute_step(self, state: ForgeState) -> dict:
        step = state['plan'][state['current_step']]
        command = step["command"]
        path = step.get("path")
        content = step.get("content")
        libraries = step.get("libraries")
        
        print(f"---CODER AGENT: Executing: {command} on path '{path}'---")
        try:
            if command == "CREATE_DIR":
                os.makedirs(path, exist_ok=True)

            elif command == "CREATE_FILE":
                await self.fs_client.write_file(path, "# Auto-generated by The Forge\n")

            elif command == "WRITE_TO_FILE":
                await self.fs_client.write_file(path, content)

            elif command == "INSTALL_LIBRARIES":
                raw_task_name = state.get("task", "default_task")
                env_path = self.venv_manager.create_env(raw_task_name)

                for lib in libraries:
                    self.venv_manager.install_package(env_path, lib, raw_task_name)

            return {"result": f"Successfully executed {command}", "current_step": state['current_step'] + 1}
        
        except Exception as e:
            return {"error": str(e)}
